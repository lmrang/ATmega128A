
Timer16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001d6  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  0000027a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089e  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d0  00000000  00000000  00000bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002bc  00000000  00000000  00001382  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001640  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d6  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000af  00000000  00000000  00001a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001b2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	31 c0       	rjmp	.+98     	; 0xc8 <__vector_25>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ed       	ldi	r30, 0xD6	; 214
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	49 d0       	rcall	.+146    	; 0x156 <main>
  c4:	86 c0       	rjmp	.+268    	; 0x1d2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_25>:
unsigned char seg[] = {0xfc, 0x60, 0xda, 0xf2, 0x66, 0xb6, 0xbe, 0xe4, 0xfe, 0xf6, 0xee, 0x3e, 0x9c, 0x7a, 0x9e, 0x8e};
unsigned int i=0;
volatile unsigned char FND_flag =0, edge_flag =0;

SIGNAL(TIMER3_CAPT_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	3f 93       	push	r19
  d6:	6f 93       	push	r22
  d8:	7f 93       	push	r23
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	af 93       	push	r26
  e0:	bf 93       	push	r27
	cli();
  e2:	f8 94       	cli
	
	unsigned int count;
	
	if(edge_flag == 0)
  e4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  e8:	81 11       	cpse	r24, r1
  ea:	0f c0       	rjmp	.+30     	; 0x10a <__vector_25+0x42>
	{//스위치가 눌리는 시간 측정
		TCCR3B = (1<<CS32) | (1<<CS30);
  ec:	85 e0       	ldi	r24, 0x05	; 5
  ee:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		TCNT3 = 0;
  f2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		ICR3 = 0;
  fa:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  fe:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		edge_flag = 1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 108:	18 c0       	rjmp	.+48     	; 0x13a <__vector_25+0x72>
	}
	
	else
	{//스위치를 떼면
		TCCR3B = (1<<ICES3) | (1<<CS32) | (1<<CS30);
 10a:	85 e4       	ldi	r24, 0x45	; 69
 10c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		count = ICR3;
 110:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 114:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		
		i = count / 720;
 118:	a3 e8       	ldi	r26, 0x83	; 131
 11a:	bd e2       	ldi	r27, 0x2D	; 45
 11c:	4b d0       	rcall	.+150    	; 0x1b4 <__umulhisi3>
 11e:	88 0f       	add	r24, r24
 120:	89 2f       	mov	r24, r25
 122:	88 1f       	adc	r24, r24
 124:	99 0b       	sbc	r25, r25
 126:	91 95       	neg	r25
 128:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <i+0x1>
 12c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <i>
		
		FND_flag = 1;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <FND_flag>
		edge_flag = 0;
 136:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	}
	sei();
 13a:	78 94       	sei
}
 13c:	bf 91       	pop	r27
 13e:	af 91       	pop	r26
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	7f 91       	pop	r23
 146:	6f 91       	pop	r22
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <main>:

int main()
{
	DDRA = 0XFF;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	8a bb       	out	0x1a, r24	; 26
	DDRE = 0X00;
 15a:	12 b8       	out	0x02, r1	; 2
	
	TCCR3A = 0X00;
 15c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = (1<<ICES3) | (1<<CS32) | (1<<CS30);
 160:	85 e4       	ldi	r24, 0x45	; 69
 162:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	
	ETIMSK = (1<<TICIE3);
 166:	80 e2       	ldi	r24, 0x20	; 32
 168:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
	ETIFR |= 1<< ICF3;
 16c:	ec e7       	ldi	r30, 0x7C	; 124
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	80 62       	ori	r24, 0x20	; 32
 174:	80 83       	st	Z, r24
	
	sei();
 176:	78 94       	sei
	
	PORTA = seg[0];
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17c:	8b bb       	out	0x1b, r24	; 27
	while(1)
	{
		if(FND_flag)
 17e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <FND_flag>
 182:	88 23       	and	r24, r24
 184:	e1 f3       	breq	.-8      	; 0x17e <main+0x28>
		{
			if(i>15) i=15;
 186:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i>
 18a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <i+0x1>
 18e:	40 97       	sbiw	r24, 0x10	; 16
 190:	30 f0       	brcs	.+12     	; 0x19e <main+0x48>
 192:	8f e0       	ldi	r24, 0x0F	; 15
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <i+0x1>
 19a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <i>
			
			PORTA = seg[i];
 19e:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <i>
 1a2:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <i+0x1>
 1a6:	e0 50       	subi	r30, 0x00	; 0
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	80 81       	ld	r24, Z
 1ac:	8b bb       	out	0x1b, r24	; 27
			FND_flag = 0;
 1ae:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <FND_flag>
 1b2:	e5 cf       	rjmp	.-54     	; 0x17e <main+0x28>

000001b4 <__umulhisi3>:
 1b4:	a2 9f       	mul	r26, r18
 1b6:	b0 01       	movw	r22, r0
 1b8:	b3 9f       	mul	r27, r19
 1ba:	c0 01       	movw	r24, r0
 1bc:	a3 9f       	mul	r26, r19
 1be:	70 0d       	add	r23, r0
 1c0:	81 1d       	adc	r24, r1
 1c2:	11 24       	eor	r1, r1
 1c4:	91 1d       	adc	r25, r1
 1c6:	b2 9f       	mul	r27, r18
 1c8:	70 0d       	add	r23, r0
 1ca:	81 1d       	adc	r24, r1
 1cc:	11 24       	eor	r1, r1
 1ce:	91 1d       	adc	r25, r1
 1d0:	08 95       	ret

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
