
Mini_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  000009a4  00000a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000ac2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000af4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ed8  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d28  00000000  00000000  00002b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f64  00000000  00000000  0000386c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000288  00000000  00000000  000047d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000561  00000000  00000000  00004a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001120  00000000  00000000  00004fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  000060d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	6a c1       	rjmp	.+724    	; 0x2ea <__vector_5>
  16:	00 00       	nop
  18:	83 c1       	rjmp	.+774    	; 0x320 <__vector_6>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ea       	ldi	r30, 0xA4	; 164
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 3a       	cpi	r26, 0xAA	; 170
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	c8 d3       	rcall	.+1936   	; 0x844 <main>
  b4:	75 c4       	rjmp	.+2282   	; 0x9a0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <init_keypad>:
#include <util/delay.h>
#include "Lcd.h"

void init_keypad()
{
	DDRA = 0xF8; //0b 1111 1000		출력(R), 입력(C)
  b8:	88 ef       	ldi	r24, 0xF8	; 248
  ba:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x07; //0b 0000 0111	1이 signal
  bc:	87 e0       	ldi	r24, 0x07	; 7
  be:	8b bb       	out	0x1b, r24	; 27
  c0:	08 95       	ret

000000c2 <keyscan>:
}

unsigned char keyscan()
{
	PORTA = 0x08; //0b 0000 1000	R0줄 ON
  c2:	88 e0       	ldi	r24, 0x08	; 8
  c4:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	89 ef       	ldi	r24, 0xF9	; 249
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <keyscan+0x8>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <keyscan+0xe>
  d0:	00 00       	nop
	_delay_ms(1);
	if((PINA & 0x07) == 0x01) return '1';		//0b 0000 0001
  d2:	89 b3       	in	r24, 0x19	; 25
  d4:	87 70       	andi	r24, 0x07	; 7
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	09 f4       	brne	.+2      	; 0xdc <keyscan+0x1a>
  da:	62 c0       	rjmp	.+196    	; 0x1a0 <keyscan+0xde>
	else if((PINA & 0x07) == 0x02) return '2';	//0b 0000 0010
  dc:	89 b3       	in	r24, 0x19	; 25
  de:	87 70       	andi	r24, 0x07	; 7
  e0:	82 30       	cpi	r24, 0x02	; 2
  e2:	09 f4       	brne	.+2      	; 0xe6 <keyscan+0x24>
  e4:	5f c0       	rjmp	.+190    	; 0x1a4 <keyscan+0xe2>
	else if((PINA & 0x07) == 0x04) return '3';	//0b 0000 0100
  e6:	89 b3       	in	r24, 0x19	; 25
  e8:	87 70       	andi	r24, 0x07	; 7
  ea:	84 30       	cpi	r24, 0x04	; 4
  ec:	09 f4       	brne	.+2      	; 0xf0 <keyscan+0x2e>
  ee:	5c c0       	rjmp	.+184    	; 0x1a8 <keyscan+0xe6>
  f0:	83 ec       	ldi	r24, 0xC3	; 195
  f2:	99 e0       	ldi	r25, 0x09	; 9
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <keyscan+0x32>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <keyscan+0x38>
  fa:	00 00       	nop
	_delay_ms(10);
	
	PORTA = 0x10;		// 0x10 R1 ON
  fc:	80 e1       	ldi	r24, 0x10	; 16
  fe:	8b bb       	out	0x1b, r24	; 27
 100:	89 ef       	ldi	r24, 0xF9	; 249
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <keyscan+0x42>
 108:	00 c0       	rjmp	.+0      	; 0x10a <keyscan+0x48>
 10a:	00 00       	nop
	_delay_ms(1);
	if((PINA & 0x07) == 0x01) return '4';		//0b 0000 0001
 10c:	89 b3       	in	r24, 0x19	; 25
 10e:	87 70       	andi	r24, 0x07	; 7
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	09 f4       	brne	.+2      	; 0x116 <keyscan+0x54>
 114:	4b c0       	rjmp	.+150    	; 0x1ac <keyscan+0xea>
	else if((PINA & 0x07) == 0x02) return '5';	//0b 0000 0010
 116:	89 b3       	in	r24, 0x19	; 25
 118:	87 70       	andi	r24, 0x07	; 7
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	09 f4       	brne	.+2      	; 0x120 <keyscan+0x5e>
 11e:	48 c0       	rjmp	.+144    	; 0x1b0 <keyscan+0xee>
	else if((PINA & 0x07) == 0x04) return '6';	//0b 0000 0100
 120:	89 b3       	in	r24, 0x19	; 25
 122:	87 70       	andi	r24, 0x07	; 7
 124:	84 30       	cpi	r24, 0x04	; 4
 126:	09 f4       	brne	.+2      	; 0x12a <keyscan+0x68>
 128:	45 c0       	rjmp	.+138    	; 0x1b4 <keyscan+0xf2>
 12a:	83 ec       	ldi	r24, 0xC3	; 195
 12c:	99 e0       	ldi	r25, 0x09	; 9
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <keyscan+0x6c>
 132:	00 c0       	rjmp	.+0      	; 0x134 <keyscan+0x72>
 134:	00 00       	nop
	_delay_ms(10);
	
	PORTA = 0x20;		// 0x20 R2 ON
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	8b bb       	out	0x1b, r24	; 27
 13a:	89 ef       	ldi	r24, 0xF9	; 249
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <keyscan+0x7c>
 142:	00 c0       	rjmp	.+0      	; 0x144 <keyscan+0x82>
 144:	00 00       	nop
	_delay_ms(1);
	if((PINA & 0x07) == 0x01) return '7';		//0b 0000 0001
 146:	89 b3       	in	r24, 0x19	; 25
 148:	87 70       	andi	r24, 0x07	; 7
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	a9 f1       	breq	.+106    	; 0x1b8 <keyscan+0xf6>
	else if((PINA & 0x07) == 0x02) return '8';	//0b 0000 0010
 14e:	89 b3       	in	r24, 0x19	; 25
 150:	87 70       	andi	r24, 0x07	; 7
 152:	82 30       	cpi	r24, 0x02	; 2
 154:	99 f1       	breq	.+102    	; 0x1bc <keyscan+0xfa>
	else if((PINA & 0x07) == 0x04) return '9';	//0b 0000 0100
 156:	89 b3       	in	r24, 0x19	; 25
 158:	87 70       	andi	r24, 0x07	; 7
 15a:	84 30       	cpi	r24, 0x04	; 4
 15c:	89 f1       	breq	.+98     	; 0x1c0 <keyscan+0xfe>
 15e:	83 ec       	ldi	r24, 0xC3	; 195
 160:	99 e0       	ldi	r25, 0x09	; 9
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <keyscan+0xa0>
 166:	00 c0       	rjmp	.+0      	; 0x168 <keyscan+0xa6>
 168:	00 00       	nop
	_delay_ms(10);
	
	PORTA = 0x40;		// 0x40 R3 ON
 16a:	80 e4       	ldi	r24, 0x40	; 64
 16c:	8b bb       	out	0x1b, r24	; 27
 16e:	89 ef       	ldi	r24, 0xF9	; 249
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <keyscan+0xb0>
 176:	00 c0       	rjmp	.+0      	; 0x178 <keyscan+0xb6>
 178:	00 00       	nop
	_delay_ms(1);
	if((PINA & 0x07) == 0x01) return '*';		//0b 0000 0001
 17a:	89 b3       	in	r24, 0x19	; 25
 17c:	87 70       	andi	r24, 0x07	; 7
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	09 f1       	breq	.+66     	; 0x1c4 <keyscan+0x102>
	else if((PINA & 0x07) == 0x02) return '0';	//0b 0000 0010
 182:	89 b3       	in	r24, 0x19	; 25
 184:	87 70       	andi	r24, 0x07	; 7
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	f9 f0       	breq	.+62     	; 0x1c8 <keyscan+0x106>
	else if((PINA & 0x07) == 0x04) return '#';	//0b 0000 0100
 18a:	89 b3       	in	r24, 0x19	; 25
 18c:	87 70       	andi	r24, 0x07	; 7
 18e:	84 30       	cpi	r24, 0x04	; 4
 190:	e9 f0       	breq	.+58     	; 0x1cc <keyscan+0x10a>
 192:	83 ec       	ldi	r24, 0xC3	; 195
 194:	99 e0       	ldi	r25, 0x09	; 9
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <keyscan+0xd4>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <keyscan+0xda>
 19c:	00 00       	nop
	_delay_ms(10);
	
	//return 0;
 19e:	08 95       	ret

unsigned char keyscan()
{
	PORTA = 0x08; //0b 0000 1000	R0줄 ON
	_delay_ms(1);
	if((PINA & 0x07) == 0x01) return '1';		//0b 0000 0001
 1a0:	81 e3       	ldi	r24, 0x31	; 49
 1a2:	08 95       	ret
	else if((PINA & 0x07) == 0x02) return '2';	//0b 0000 0010
 1a4:	82 e3       	ldi	r24, 0x32	; 50
 1a6:	08 95       	ret
	else if((PINA & 0x07) == 0x04) return '3';	//0b 0000 0100
 1a8:	83 e3       	ldi	r24, 0x33	; 51
 1aa:	08 95       	ret
	_delay_ms(10);
	
	PORTA = 0x10;		// 0x10 R1 ON
	_delay_ms(1);
	if((PINA & 0x07) == 0x01) return '4';		//0b 0000 0001
 1ac:	84 e3       	ldi	r24, 0x34	; 52
 1ae:	08 95       	ret
	else if((PINA & 0x07) == 0x02) return '5';	//0b 0000 0010
 1b0:	85 e3       	ldi	r24, 0x35	; 53
 1b2:	08 95       	ret
	else if((PINA & 0x07) == 0x04) return '6';	//0b 0000 0100
 1b4:	86 e3       	ldi	r24, 0x36	; 54
 1b6:	08 95       	ret
	_delay_ms(10);
	
	PORTA = 0x20;		// 0x20 R2 ON
	_delay_ms(1);
	if((PINA & 0x07) == 0x01) return '7';		//0b 0000 0001
 1b8:	87 e3       	ldi	r24, 0x37	; 55
 1ba:	08 95       	ret
	else if((PINA & 0x07) == 0x02) return '8';	//0b 0000 0010
 1bc:	88 e3       	ldi	r24, 0x38	; 56
 1be:	08 95       	ret
	else if((PINA & 0x07) == 0x04) return '9';	//0b 0000 0100
 1c0:	89 e3       	ldi	r24, 0x39	; 57
 1c2:	08 95       	ret
	_delay_ms(10);
	
	PORTA = 0x40;		// 0x40 R3 ON
	_delay_ms(1);
	if((PINA & 0x07) == 0x01) return '*';		//0b 0000 0001
 1c4:	8a e2       	ldi	r24, 0x2A	; 42
 1c6:	08 95       	ret
	else if((PINA & 0x07) == 0x02) return '0';	//0b 0000 0010
 1c8:	80 e3       	ldi	r24, 0x30	; 48
 1ca:	08 95       	ret
	else if((PINA & 0x07) == 0x04) return '#';	//0b 0000 0100
 1cc:	83 e2       	ldi	r24, 0x23	; 35
	_delay_ms(10);
	
	//return 0;
 1ce:	08 95       	ret

000001d0 <Lcd_Data>:
 1d0:	e5 e6       	ldi	r30, 0x65	; 101
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	90 81       	ld	r25, Z
 1d6:	91 60       	ori	r25, 0x01	; 1
 1d8:	90 83       	st	Z, r25
 1da:	90 81       	ld	r25, Z
 1dc:	9d 7f       	andi	r25, 0xFD	; 253
 1de:	90 83       	st	Z, r25
 1e0:	90 81       	ld	r25, Z
 1e2:	94 60       	ori	r25, 0x04	; 4
 1e4:	90 83       	st	Z, r25
 1e6:	90 e1       	ldi	r25, 0x10	; 16
 1e8:	9a 95       	dec	r25
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <Lcd_Data+0x18>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <Lcd_Data+0x1e>
 1ee:	85 bb       	out	0x15, r24	; 21
 1f0:	80 e1       	ldi	r24, 0x10	; 16
 1f2:	8a 95       	dec	r24
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <Lcd_Data+0x22>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <Lcd_Data+0x28>
 1f8:	80 81       	ld	r24, Z
 1fa:	8b 7f       	andi	r24, 0xFB	; 251
 1fc:	80 83       	st	Z, r24
 1fe:	08 95       	ret

00000200 <Lcd_Cmd>:
 200:	e5 e6       	ldi	r30, 0x65	; 101
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	90 81       	ld	r25, Z
 206:	9e 7f       	andi	r25, 0xFE	; 254
 208:	90 83       	st	Z, r25
 20a:	90 81       	ld	r25, Z
 20c:	9d 7f       	andi	r25, 0xFD	; 253
 20e:	90 83       	st	Z, r25
 210:	90 81       	ld	r25, Z
 212:	94 60       	ori	r25, 0x04	; 4
 214:	90 83       	st	Z, r25
 216:	90 e1       	ldi	r25, 0x10	; 16
 218:	9a 95       	dec	r25
 21a:	f1 f7       	brne	.-4      	; 0x218 <Lcd_Cmd+0x18>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <Lcd_Cmd+0x1e>
 21e:	85 bb       	out	0x15, r24	; 21
 220:	80 e1       	ldi	r24, 0x10	; 16
 222:	8a 95       	dec	r24
 224:	f1 f7       	brne	.-4      	; 0x222 <Lcd_Cmd+0x22>
 226:	00 c0       	rjmp	.+0      	; 0x228 <Lcd_Cmd+0x28>
 228:	80 81       	ld	r24, Z
 22a:	8b 7f       	andi	r24, 0xFB	; 251
 22c:	80 83       	st	Z, r24
 22e:	08 95       	ret

00000230 <Lcd_CHAR>:
 230:	cf df       	rcall	.-98     	; 0x1d0 <Lcd_Data>
 232:	89 ef       	ldi	r24, 0xF9	; 249
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <Lcd_CHAR+0x6>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <Lcd_CHAR+0xc>
 23c:	00 00       	nop
 23e:	08 95       	ret

00000240 <Lcd_STR>:
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	ec 01       	movw	r28, r24
 246:	02 c0       	rjmp	.+4      	; 0x24c <Lcd_STR+0xc>
 248:	21 96       	adiw	r28, 0x01	; 1
 24a:	f2 df       	rcall	.-28     	; 0x230 <Lcd_CHAR>
 24c:	88 81       	ld	r24, Y
 24e:	81 11       	cpse	r24, r1
 250:	fb cf       	rjmp	.-10     	; 0x248 <Lcd_STR+0x8>
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <Lcd_Pos>:
 258:	90 e4       	ldi	r25, 0x40	; 64
 25a:	89 9f       	mul	r24, r25
 25c:	60 0d       	add	r22, r0
 25e:	11 24       	eor	r1, r1
 260:	86 2f       	mov	r24, r22
 262:	80 68       	ori	r24, 0x80	; 128
 264:	cd df       	rcall	.-102    	; 0x200 <Lcd_Cmd>
 266:	81 ee       	ldi	r24, 0xE1	; 225
 268:	94 e0       	ldi	r25, 0x04	; 4
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <Lcd_Pos+0x12>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <Lcd_Pos+0x18>
 270:	00 00       	nop
 272:	08 95       	ret

00000274 <Lcd_Clear>:
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	c4 df       	rcall	.-120    	; 0x200 <Lcd_Cmd>
 278:	83 ec       	ldi	r24, 0xC3	; 195
 27a:	99 e0       	ldi	r25, 0x09	; 9
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <Lcd_Clear+0x8>
 280:	00 c0       	rjmp	.+0      	; 0x282 <Lcd_Clear+0xe>
 282:	00 00       	nop
 284:	08 95       	ret

00000286 <Lcd_Init>:
	}
}

void Lcd_Init(void)
{
	Lcd_Cmd(0x38);
 286:	88 e3       	ldi	r24, 0x38	; 56
 288:	bb df       	rcall	.-138    	; 0x200 <Lcd_Cmd>
 28a:	83 ef       	ldi	r24, 0xF3	; 243
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <Lcd_Init+0x8>
 292:	00 c0       	rjmp	.+0      	; 0x294 <Lcd_Init+0xe>
 294:	00 00       	nop
	_delay_ms(2);	//명령어를 IR에 쓰고나면 40us 또는 1.64ms을 기다림.
	Lcd_Cmd(0x38);
 296:	88 e3       	ldi	r24, 0x38	; 56
 298:	b3 df       	rcall	.-154    	; 0x200 <Lcd_Cmd>
 29a:	83 ef       	ldi	r24, 0xF3	; 243
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <Lcd_Init+0x18>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <Lcd_Init+0x1e>
	_delay_ms(2);
	Lcd_Cmd(0x38);
 2a4:	00 00       	nop
 2a6:	88 e3       	ldi	r24, 0x38	; 56
 2a8:	ab df       	rcall	.-170    	; 0x200 <Lcd_Cmd>
 2aa:	83 ef       	ldi	r24, 0xF3	; 243
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <Lcd_Init+0x28>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <Lcd_Init+0x2e>
	_delay_ms(2);
	Lcd_Cmd(0x0c);
 2b4:	00 00       	nop
 2b6:	8c e0       	ldi	r24, 0x0C	; 12
 2b8:	a3 df       	rcall	.-186    	; 0x200 <Lcd_Cmd>
 2ba:	83 ef       	ldi	r24, 0xF3	; 243
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <Lcd_Init+0x38>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <Lcd_Init+0x3e>
	_delay_ms(2);
	Lcd_Cmd(0x06);
 2c4:	00 00       	nop
 2c6:	86 e0       	ldi	r24, 0x06	; 6
 2c8:	9b df       	rcall	.-202    	; 0x200 <Lcd_Cmd>
 2ca:	83 ef       	ldi	r24, 0xF3	; 243
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <Lcd_Init+0x48>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <Lcd_Init+0x4e>
	_delay_ms(2);
	Lcd_Clear();
 2d4:	00 00       	nop
 2d6:	ce cf       	rjmp	.-100    	; 0x274 <Lcd_Clear>
 2d8:	08 95       	ret

000002da <Lcd_password_clear>:
}

void Lcd_password_clear()
{
	Lcd_Clear();
 2da:	cc df       	rcall	.-104    	; 0x274 <Lcd_Clear>
	Lcd_Pos(0, 0);
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	bb df       	rcall	.-138    	; 0x258 <Lcd_Pos>
	Lcd_STR("PASSWORD?");
 2e2:	8f e0       	ldi	r24, 0x0F	; 15
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	ac cf       	rjmp	.-168    	; 0x240 <Lcd_STR>
 2e8:	08 95       	ret

000002ea <__vector_5>:
unsigned int Door[4] = {523, 659, 783, 1046};
unsigned char R_PassWord[]="0000";					//최초 비밀번호 0000
int mode = 1;

SIGNAL(INT4_vect)
{
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
	cli();
 2f8:	f8 94       	cli
	mode *= -1;
 2fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 302:	91 95       	neg	r25
 304:	81 95       	neg	r24
 306:	91 09       	sbc	r25, r1
 308:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 30c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei();
 310:	78 94       	sei
}
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <__vector_6>:

SIGNAL(INT5_vect)
{
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	8f 93       	push	r24
 32c:	9f 93       	push	r25
	cli();
 32e:	f8 94       	cli
	mode = 5;
 330:	85 e0       	ldi	r24, 0x05	; 5
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 338:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei();
 33c:	78 94       	sei
}
 33e:	9f 91       	pop	r25
 340:	8f 91       	pop	r24
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <music>:

void music(int i)
{	//부저
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	ec 01       	movw	r28, r24
	for(;i<5;i++)
 352:	21 c0       	rjmp	.+66     	; 0x396 <music+0x4a>
	{
		ICR3 = 7372800 / Door[i]/5;
 354:	fe 01       	movw	r30, r28
 356:	ee 0f       	add	r30, r30
 358:	ff 1f       	adc	r31, r31
 35a:	e9 5f       	subi	r30, 0xF9	; 249
 35c:	fe 4f       	sbci	r31, 0xFE	; 254
 35e:	20 81       	ld	r18, Z
 360:	31 81       	ldd	r19, Z+1	; 0x01
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	70 e8       	ldi	r23, 0x80	; 128
 36a:	86 e1       	ldi	r24, 0x16	; 22
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	da d2       	rcall	.+1460   	; 0x924 <__divmodsi4>
 370:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 374:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		TCCR3A = 0x40;
 378:	eb e8       	ldi	r30, 0x8B	; 139
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 e4       	ldi	r24, 0x40	; 64
 37e:	80 83       	st	Z, r24
 380:	2f ef       	ldi	r18, 0xFF	; 255
 382:	8f e7       	ldi	r24, 0x7F	; 127
 384:	94 e0       	ldi	r25, 0x04	; 4
 386:	21 50       	subi	r18, 0x01	; 1
 388:	80 40       	sbci	r24, 0x00	; 0
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	e1 f7       	brne	.-8      	; 0x386 <music+0x3a>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <music+0x44>
 390:	00 00       	nop
		_delay_ms(200);
		TCCR3A=0X00;
 392:	10 82       	st	Z, r1
	sei();
}

void music(int i)
{	//부저
	for(;i<5;i++)
 394:	21 96       	adiw	r28, 0x01	; 1
 396:	c5 30       	cpi	r28, 0x05	; 5
 398:	d1 05       	cpc	r29, r1
 39a:	e4 f2       	brlt	.-72     	; 0x354 <music+0x8>
		ICR3 = 7372800 / Door[i]/5;
		TCCR3A = 0x40;
		_delay_ms(200);
		TCCR3A=0X00;
	}
}
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <getch>:

unsigned char getch()
{
	unsigned char data;
	while((UCSR0A & 0x80) == 0) if(mode > 0) return 'R';
 3a2:	07 c0       	rjmp	.+14     	; 0x3b2 <getch+0x10>
 3a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3ac:	18 16       	cp	r1, r24
 3ae:	19 06       	cpc	r1, r25
 3b0:	3c f0       	brlt	.+14     	; 0x3c0 <getch+0x1e>
 3b2:	5f 9b       	sbis	0x0b, 7	; 11
 3b4:	f7 cf       	rjmp	.-18     	; 0x3a4 <getch+0x2>
	data = UDR0;
 3b6:	8c b1       	in	r24, 0x0c	; 12
	UCSR0A |= 0x80;
 3b8:	9b b1       	in	r25, 0x0b	; 11
 3ba:	90 68       	ori	r25, 0x80	; 128
 3bc:	9b b9       	out	0x0b, r25	; 11
	return data;
 3be:	08 95       	ret
}

unsigned char getch()
{
	unsigned char data;
	while((UCSR0A & 0x80) == 0) if(mode > 0) return 'R';
 3c0:	82 e5       	ldi	r24, 0x52	; 82
	data = UDR0;
	UCSR0A |= 0x80;
	return data;
}
 3c2:	08 95       	ret

000003c4 <On_board_Password>:
		}
	}
}

int On_board_Password()
{
 3c4:	0f 93       	push	r16
 3c6:	1f 93       	push	r17
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	00 d0       	rcall	.+0      	; 0x3ce <On_board_Password+0xa>
 3ce:	00 d0       	rcall	.+0      	; 0x3d0 <On_board_Password+0xc>
 3d0:	1f 92       	push	r1
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
	int i=0, Error=0;		//i = 배열위치, Error = 잘 못 입력했을 시 1
	unsigned char PassWord[5]="";
 3d6:	1a 82       	std	Y+2, r1	; 0x02
 3d8:	19 82       	std	Y+1, r1	; 0x01
 3da:	fe 01       	movw	r30, r28
 3dc:	33 96       	adiw	r30, 0x03	; 3
 3de:	83 e0       	ldi	r24, 0x03	; 3
 3e0:	df 01       	movw	r26, r30
 3e2:	1d 92       	st	X+, r1
 3e4:	8a 95       	dec	r24
 3e6:	e9 f7       	brne	.-6      	; 0x3e2 <On_board_Password+0x1e>
	}
}

int On_board_Password()
{
	int i=0, Error=0;		//i = 배열위치, Error = 잘 못 입력했을 시 1
 3e8:	00 e0       	ldi	r16, 0x00	; 0
 3ea:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char PassWord[5]="";
	
	for(;i<6;){
 3ec:	56 c0       	rjmp	.+172    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
		if(mode == -1 || mode == 5)	return 3;										//모드 변경 시 main으로 돌아가기
 3ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3f6:	8f 3f       	cpi	r24, 0xFF	; 255
 3f8:	bf ef       	ldi	r27, 0xFF	; 255
 3fa:	9b 07       	cpc	r25, r27
 3fc:	09 f4       	brne	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fe:	52 c0       	rjmp	.+164    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 400:	05 97       	sbiw	r24, 0x05	; 5
 402:	09 f4       	brne	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	52 c0       	rjmp	.+164    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
			
		if(keyscan()!='\0' ){										//키패드에서 입력 받아오기
 406:	5d de       	rcall	.-838    	; 0xc2 <keyscan>
 408:	88 23       	and	r24, r24
 40a:	09 f4       	brne	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	46 c0       	rjmp	.+140    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
			PassWord[i] = keyscan();								//배열에 키패드에서 받아온 값 입력
 40e:	59 de       	rcall	.-846    	; 0xc2 <keyscan>
 410:	e1 e0       	ldi	r30, 0x01	; 1
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	ec 0f       	add	r30, r28
 416:	fd 1f       	adc	r31, r29
 418:	e0 0f       	add	r30, r16
 41a:	f1 1f       	adc	r31, r17
 41c:	80 83       	st	Z, r24
 41e:	90 ed       	ldi	r25, 0xD0	; 208
			if(PassWord[i] >= 0x30 && PassWord[i]<=0x39)			//범위설정
 420:	98 0f       	add	r25, r24
 422:	9a 30       	cpi	r25, 0x0A	; 10
 424:	38 f4       	brcc	.+14     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 426:	60 2f       	mov	r22, r16
			{	//0~9까지만 입력 가능
				Lcd_Pos(1, i);										//LCD 위치 설정
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	16 df       	rcall	.-468    	; 0x258 <Lcd_Pos>
 42c:	89 e1       	ldi	r24, 0x19	; 25
				Lcd_STR("*");										//숫자 대신 *을 출력하여 보안
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	07 df       	rcall	.-498    	; 0x240 <Lcd_STR>
 432:	28 c0       	rjmp	.+80     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 434:	83 32       	cpi	r24, 0x23	; 35
			}
			else if(PassWord[i] == '#')
 436:	29 f4       	brne	.+10     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 438:	50 df       	rcall	.-352    	; 0x2da <Lcd_password_clear>
			{	//# : Clear
				Lcd_password_clear();								//LCD 초기화
 43a:	19 82       	std	Y+1, r1	; 0x01
 43c:	0f ef       	ldi	r16, 0xFF	; 255
				PassWord[0] = '\0';
 43e:	1f ef       	ldi	r17, 0xFF	; 255
				i=-1;
 440:	21 c0       	rjmp	.+66     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 442:	8a 32       	cpi	r24, 0x2A	; 42
 444:	f9 f4       	brne	.+62     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			}
			else if(PassWord[i] == '*')
 446:	11 c0       	rjmp	.+34     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 448:	fc 01       	movw	r30, r24
 44a:	ee 5f       	subi	r30, 0xFE	; 254
			{	//* : 입력완료, 문자열 비교
				for(int j=0;j<4;j++)
				{
					if(R_PassWord[j] != PassWord[j]) Error = 1;		//저장된 비밀번호와 입력된 비밀번호 비교
 44c:	fe 4f       	sbci	r31, 0xFE	; 254
 44e:	50 81       	ld	r21, Z
 450:	e1 e0       	ldi	r30, 0x01	; 1
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	ec 0f       	add	r30, r28
 456:	fd 1f       	adc	r31, r29
 458:	e8 0f       	add	r30, r24
 45a:	f9 1f       	adc	r31, r25
 45c:	40 81       	ld	r20, Z
 45e:	54 17       	cp	r21, r20
 460:	11 f0       	breq	.+4      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 462:	21 e0       	ldi	r18, 0x01	; 1
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	01 96       	adiw	r24, 0x01	; 1
 468:	04 c0       	rjmp	.+8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
				PassWord[0] = '\0';
				i=-1;
			}
			else if(PassWord[i] == '*')
			{	//* : 입력완료, 문자열 비교
				for(int j=0;j<4;j++)
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	84 30       	cpi	r24, 0x04	; 4
 474:	91 05       	cpc	r25, r1
 476:	44 f3       	brlt	.-48     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 478:	21 30       	cpi	r18, 0x01	; 1
 47a:	31 05       	cpc	r19, r1
				{
					if(R_PassWord[j] != PassWord[j]) Error = 1;		//저장된 비밀번호와 입력된 비밀번호 비교
				}
				
				if(Error==1)	return 1;									//비교 시 다를 경우
 47c:	c9 f4       	brne	.+50     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	18 c0       	rjmp	.+48     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 484:	0f 5f       	subi	r16, 0xFF	; 255
 486:	1f 4f       	sbci	r17, 0xFF	; 255
				else return 2;												//비교 시 같은 경우
			}//end of else if(PassWord[i] == '*')
			i++;
 488:	2f ef       	ldi	r18, 0xFF	; 255
 48a:	8f e7       	ldi	r24, 0x7F	; 127
 48c:	94 e0       	ldi	r25, 0x04	; 4
 48e:	21 50       	subi	r18, 0x01	; 1
 490:	80 40       	sbci	r24, 0x00	; 0
 492:	90 40       	sbci	r25, 0x00	; 0
 494:	e1 f7       	brne	.-8      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 496:	00 c0       	rjmp	.+0      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 498:	00 00       	nop
 49a:	06 30       	cpi	r16, 0x06	; 6
 49c:	11 05       	cpc	r17, r1
int On_board_Password()
{
	int i=0, Error=0;		//i = 배열위치, Error = 잘 못 입력했을 시 1
	unsigned char PassWord[5]="";
	
	for(;i<6;){
 49e:	0c f4       	brge	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4a0:	a6 cf       	rjmp	.-180    	; 0x3ee <On_board_Password+0x2a>
 4a2:	08 c0       	rjmp	.+16     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4a4:	83 e0       	ldi	r24, 0x03	; 3
			}//end of else if(PassWord[i] == '*')
			i++;
			_delay_ms(200);
			}//end of if(keyscan()!='\0')
		}//end of for(;i<6;)
}
 4a6:	90 e0       	ldi	r25, 0x00	; 0
{
	int i=0, Error=0;		//i = 배열위치, Error = 잘 못 입력했을 시 1
	unsigned char PassWord[5]="";
	
	for(;i<6;){
		if(mode == -1 || mode == 5)	return 3;										//모드 변경 시 main으로 돌아가기
 4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4aa:	83 e0       	ldi	r24, 0x03	; 3
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4b0:	82 e0       	ldi	r24, 0x02	; 2
 4b2:	90 e0       	ldi	r25, 0x00	; 0
				{
					if(R_PassWord[j] != PassWord[j]) Error = 1;		//저장된 비밀번호와 입력된 비밀번호 비교
				}
				
				if(Error==1)	return 1;									//비교 시 다를 경우
				else return 2;												//비교 시 같은 경우
 4b4:	0f 90       	pop	r0
 4b6:	0f 90       	pop	r0
			}//end of else if(PassWord[i] == '*')
			i++;
			_delay_ms(200);
			}//end of if(keyscan()!='\0')
		}//end of for(;i<6;)
}
 4b8:	0f 90       	pop	r0
 4ba:	0f 90       	pop	r0
 4bc:	0f 90       	pop	r0
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	1f 91       	pop	r17
 4c4:	0f 91       	pop	r16
 4c6:	08 95       	ret

000004c8 <On_board>:
 4c8:	d5 de       	rcall	.-598    	; 0x274 <Lcd_Clear>
 4ca:	60 e0       	ldi	r22, 0x00	; 0
void On_board()
{
	int Error= 0;
	
	Lcd_Clear();		//LCD초기화
	Lcd_Pos(0, 0);		//LCD 위치설정
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	c4 de       	rcall	.-632    	; 0x258 <Lcd_Pos>
	Lcd_STR("PASSWORD?");
 4d0:	8f e0       	ldi	r24, 0x0F	; 15
 4d2:	91 e0       	ldi	r25, 0x01	; 1
	
	while(1)
	{
		Error = On_board_Password();
 4d4:	b5 de       	rcall	.-662    	; 0x240 <Lcd_STR>
 4d6:	76 df       	rcall	.-276    	; 0x3c4 <On_board_Password>
		
		if(Error==1)										//비교 시 다를 경우
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	91 05       	cpc	r25, r1
		{
			Lcd_Pos(1, 0);
 4dc:	a1 f4       	brne	.+40     	; 0x506 <On_board+0x3e>
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	81 e0       	ldi	r24, 0x01	; 1
			Lcd_STR("Error number");
 4e2:	ba de       	rcall	.-652    	; 0x258 <Lcd_Pos>
 4e4:	8b e1       	ldi	r24, 0x1B	; 27
 4e6:	91 e0       	ldi	r25, 0x01	; 1
			music(error);									//error 소리
 4e8:	ab de       	rcall	.-682    	; 0x240 <Lcd_STR>
 4ea:	83 e0       	ldi	r24, 0x03	; 3
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	2e df       	rcall	.-420    	; 0x34c <music>
 4f0:	2f ef       	ldi	r18, 0xFF	; 255
 4f2:	8f e7       	ldi	r24, 0x7F	; 127
 4f4:	96 e1       	ldi	r25, 0x16	; 22
 4f6:	21 50       	subi	r18, 0x01	; 1
 4f8:	80 40       	sbci	r24, 0x00	; 0
 4fa:	90 40       	sbci	r25, 0x00	; 0
 4fc:	e1 f7       	brne	.-8      	; 0x4f6 <On_board+0x2e>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <On_board+0x38>
			_delay_ms(1000);								//1s delay
			Lcd_password_clear();							//LCD 초기화
 500:	00 00       	nop
 502:	eb de       	rcall	.-554    	; 0x2da <Lcd_password_clear>
		}
		else if(Error == 2)											//비교 시 같은 경우
 504:	e8 cf       	rjmp	.-48     	; 0x4d6 <On_board+0xe>
 506:	82 30       	cpi	r24, 0x02	; 2
		{
			Lcd_Pos(1, 0);
 508:	91 05       	cpc	r25, r1
 50a:	a9 f4       	brne	.+42     	; 0x536 <On_board+0x6e>
			Lcd_STR("OPEN");
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	a3 de       	rcall	.-698    	; 0x258 <Lcd_Pos>
 512:	88 e2       	ldi	r24, 0x28	; 40
			music(open);									//Door Open 소리
 514:	91 e0       	ldi	r25, 0x01	; 1
 516:	94 de       	rcall	.-728    	; 0x240 <Lcd_STR>
 518:	80 e0       	ldi	r24, 0x00	; 0
			Motor();										//도어락 잠금장치 해제(모터)
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	17 df       	rcall	.-466    	; 0x34c <music>
 51e:	bf d1       	rcall	.+894    	; 0x89e <Motor>
 520:	2f ef       	ldi	r18, 0xFF	; 255
 522:	8f e7       	ldi	r24, 0x7F	; 127
 524:	96 e1       	ldi	r25, 0x16	; 22
 526:	21 50       	subi	r18, 0x01	; 1
 528:	80 40       	sbci	r24, 0x00	; 0
 52a:	90 40       	sbci	r25, 0x00	; 0
 52c:	e1 f7       	brne	.-8      	; 0x526 <On_board+0x5e>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <On_board+0x68>
			_delay_ms(1000);								//1s delay
			Lcd_password_clear();							//LCD 초기화
 530:	00 00       	nop
 532:	d3 de       	rcall	.-602    	; 0x2da <Lcd_password_clear>
 534:	d0 cf       	rjmp	.-96     	; 0x4d6 <On_board+0xe>
		}
		else if(Error == 3) 
 536:	03 97       	sbiw	r24, 0x03	; 3
 538:	71 f6       	brne	.-100    	; 0x4d6 <On_board+0xe>
		{
			return;
		}
	}
}
 53a:	08 95       	ret

0000053c <ON_terminal>:
			}//end of if(keyscan()!='\0')
		}//end of for(;i<6;)
}

void ON_terminal()
{
 53c:	0f 93       	push	r16
 53e:	1f 93       	push	r17
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	00 d0       	rcall	.+0      	; 0x546 <ON_terminal+0xa>
 546:	00 d0       	rcall	.+0      	; 0x548 <ON_terminal+0xc>
 548:	1f 92       	push	r1
 54a:	cd b7       	in	r28, 0x3d	; 61
 54c:	de b7       	in	r29, 0x3e	; 62
	char PassWord[5];
	int i=0, Error=0;
	
	Lcd_Clear();
 54e:	92 de       	rcall	.-732    	; 0x274 <Lcd_Clear>
	Lcd_Pos(0, 0);
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	81 de       	rcall	.-766    	; 0x258 <Lcd_Pos>
	Lcd_STR("TERMINAL MODE");
 556:	8d e2       	ldi	r24, 0x2D	; 45
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	72 de       	rcall	.-796    	; 0x240 <Lcd_STR>
}

void ON_terminal()
{
	char PassWord[5];
	int i=0, Error=0;
 55c:	00 e0       	ldi	r16, 0x00	; 0
	
	Lcd_Clear();
	Lcd_Pos(0, 0);
	Lcd_STR("TERMINAL MODE");
	
	for(;i<6;)
 55e:	10 e0       	ldi	r17, 0x00	; 0
	{
		PassWord[i]=getch();										//getch내부에 mode변경함수 있음.
 560:	5f c0       	rjmp	.+190    	; 0x620 <ON_terminal+0xe4>
 562:	1f df       	rcall	.-450    	; 0x3a2 <getch>
 564:	e1 e0       	ldi	r30, 0x01	; 1
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	ec 0f       	add	r30, r28
 56a:	fd 1f       	adc	r31, r29
 56c:	e0 0f       	add	r30, r16
 56e:	f1 1f       	adc	r31, r17
 570:	80 83       	st	Z, r24
		if(PassWord[i]=='R') return;								//mode변경 함수 return 'R' -> 모드 변경(On_Board)
 572:	82 35       	cpi	r24, 0x52	; 82
 574:	09 f4       	brne	.+2      	; 0x578 <ON_terminal+0x3c>
 576:	58 c0       	rjmp	.+176    	; 0x628 <ON_terminal+0xec>
		if(PassWord[i] >= 0x30 && PassWord[i] <= 0x39)				//숫자 외 다른 입력 제외
 578:	90 ed       	ldi	r25, 0xD0	; 208
 57a:	98 0f       	add	r25, r24
 57c:	9a 30       	cpi	r25, 0x0A	; 10
		{
			putch_USART0('*');										//숫자 대신 * 출력
 57e:	28 f4       	brcc	.+10     	; 0x58a <ON_terminal+0x4e>
 580:	8a e2       	ldi	r24, 0x2A	; 42
 582:	c0 d1       	rcall	.+896    	; 0x904 <putch_USART0>
			i++;
 584:	0f 5f       	subi	r16, 0xFF	; 255
 586:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		else if(PassWord[i] == '-')									
 588:	4b c0       	rjmp	.+150    	; 0x620 <ON_terminal+0xe4>
		{	//- : Clear
			putch_USART0('\r');
 58a:	8d 32       	cpi	r24, 0x2D	; 45
 58c:	39 f4       	brne	.+14     	; 0x59c <ON_terminal+0x60>
 58e:	8d e0       	ldi	r24, 0x0D	; 13
			putch_USART0('\n');
 590:	b9 d1       	rcall	.+882    	; 0x904 <putch_USART0>
 592:	8a e0       	ldi	r24, 0x0A	; 10
 594:	b7 d1       	rcall	.+878    	; 0x904 <putch_USART0>
			i=0;
 596:	00 e0       	ldi	r16, 0x00	; 0
 598:	10 e0       	ldi	r17, 0x00	; 0
 59a:	42 c0       	rjmp	.+132    	; 0x620 <ON_terminal+0xe4>
		}
		else if(PassWord[i] == '*')
 59c:	8a 32       	cpi	r24, 0x2A	; 42
 59e:	09 f0       	breq	.+2      	; 0x5a2 <ON_terminal+0x66>
 5a0:	3f c0       	rjmp	.+126    	; 0x620 <ON_terminal+0xe4>
 5a2:	11 c0       	rjmp	.+34     	; 0x5c6 <ON_terminal+0x8a>
		{	//* : 입력 완료, 문자 비교
			for(int j=0;j<4;j++) if(R_PassWord[j] != PassWord[j]) Error = 1;
 5a4:	fc 01       	movw	r30, r24
 5a6:	ee 5f       	subi	r30, 0xFE	; 254
 5a8:	fe 4f       	sbci	r31, 0xFE	; 254
 5aa:	30 81       	ld	r19, Z
 5ac:	e1 e0       	ldi	r30, 0x01	; 1
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	ec 0f       	add	r30, r28
 5b2:	fd 1f       	adc	r31, r29
 5b4:	e8 0f       	add	r30, r24
 5b6:	f9 1f       	adc	r31, r25
 5b8:	20 81       	ld	r18, Z
 5ba:	32 17       	cp	r19, r18
 5bc:	11 f0       	breq	.+4      	; 0x5c2 <ON_terminal+0x86>
 5be:	41 e0       	ldi	r20, 0x01	; 1
 5c0:	50 e0       	ldi	r21, 0x00	; 0
 5c2:	01 96       	adiw	r24, 0x01	; 1
 5c4:	04 c0       	rjmp	.+8      	; 0x5ce <ON_terminal+0x92>
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	40 e0       	ldi	r20, 0x00	; 0
 5cc:	50 e0       	ldi	r21, 0x00	; 0
 5ce:	84 30       	cpi	r24, 0x04	; 4
 5d0:	91 05       	cpc	r25, r1
			
			if(Error==1)
 5d2:	44 f3       	brlt	.-48     	; 0x5a4 <ON_terminal+0x68>
 5d4:	41 30       	cpi	r20, 0x01	; 1
			{
				puts_USART0("Error Number!\r\n");
 5d6:	51 05       	cpc	r21, r1
 5d8:	81 f4       	brne	.+32     	; 0x5fa <ON_terminal+0xbe>
 5da:	8b e3       	ldi	r24, 0x3B	; 59
 5dc:	91 e0       	ldi	r25, 0x01	; 1
				music(error);
 5de:	96 d1       	rcall	.+812    	; 0x90c <puts_USART0>
 5e0:	83 e0       	ldi	r24, 0x03	; 3
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	b3 de       	rcall	.-666    	; 0x34c <music>
 5e6:	2f ef       	ldi	r18, 0xFF	; 255
 5e8:	8f e7       	ldi	r24, 0x7F	; 127
 5ea:	96 e1       	ldi	r25, 0x16	; 22
 5ec:	21 50       	subi	r18, 0x01	; 1
 5ee:	80 40       	sbci	r24, 0x00	; 0
 5f0:	90 40       	sbci	r25, 0x00	; 0
 5f2:	e1 f7       	brne	.-8      	; 0x5ec <ON_terminal+0xb0>
				_delay_ms(1000);
			}
			else
			{
				puts_USART0("OPEN!!\r\n");
 5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <ON_terminal+0xba>
 5f6:	00 00       	nop
 5f8:	10 c0       	rjmp	.+32     	; 0x61a <ON_terminal+0xde>
 5fa:	8b e4       	ldi	r24, 0x4B	; 75
				music(open);
 5fc:	91 e0       	ldi	r25, 0x01	; 1
 5fe:	86 d1       	rcall	.+780    	; 0x90c <puts_USART0>
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	90 e0       	ldi	r25, 0x00	; 0
				Motor();
 604:	a3 de       	rcall	.-698    	; 0x34c <music>
 606:	4b d1       	rcall	.+662    	; 0x89e <Motor>
 608:	2f ef       	ldi	r18, 0xFF	; 255
 60a:	8f e7       	ldi	r24, 0x7F	; 127
 60c:	96 e1       	ldi	r25, 0x16	; 22
 60e:	21 50       	subi	r18, 0x01	; 1
 610:	80 40       	sbci	r24, 0x00	; 0
 612:	90 40       	sbci	r25, 0x00	; 0
 614:	e1 f7       	brne	.-8      	; 0x60e <ON_terminal+0xd2>
 616:	00 c0       	rjmp	.+0      	; 0x618 <ON_terminal+0xdc>
 618:	00 00       	nop
				_delay_ms(1000);
			}
			PassWord[0] = '\0';
 61a:	19 82       	std	Y+1, r1	; 0x01
			i=0;
 61c:	00 e0       	ldi	r16, 0x00	; 0
 61e:	10 e0       	ldi	r17, 0x00	; 0
	
	Lcd_Clear();
	Lcd_Pos(0, 0);
	Lcd_STR("TERMINAL MODE");
	
	for(;i<6;)
 620:	06 30       	cpi	r16, 0x06	; 6
 622:	11 05       	cpc	r17, r1
 624:	0c f4       	brge	.+2      	; 0x628 <ON_terminal+0xec>
 626:	9d cf       	rjmp	.-198    	; 0x562 <ON_terminal+0x26>
			i=0;
			Error = 0;
		}//end of else if(PassWord[i] == '*')
		//}//end of if(getch()!='\0')
	}//end of for(;i<6;)
}//end of void ON_terminal()
 628:	0f 90       	pop	r0
 62a:	0f 90       	pop	r0
 62c:	0f 90       	pop	r0
 62e:	0f 90       	pop	r0
 630:	0f 90       	pop	r0
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	1f 91       	pop	r17
 638:	0f 91       	pop	r16
 63a:	08 95       	ret

0000063c <Change_Password>:

void Change_Password()
{
 63c:	ef 92       	push	r14
 63e:	ff 92       	push	r15
 640:	1f 93       	push	r17
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	00 d0       	rcall	.+0      	; 0x648 <Change_Password+0xc>
 648:	00 d0       	rcall	.+0      	; 0x64a <Change_Password+0xe>
 64a:	1f 92       	push	r1
 64c:	cd b7       	in	r28, 0x3d	; 61
 64e:	de b7       	in	r29, 0x3e	; 62
	Lcd_Clear();		//LCD초기화
 650:	11 de       	rcall	.-990    	; 0x274 <Lcd_Clear>
	Lcd_Pos(0, 0);		//LCD 위치설정
 652:	60 e0       	ldi	r22, 0x00	; 0
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	00 de       	rcall	.-1024   	; 0x258 <Lcd_Pos>
	Lcd_STR("Identification");
 658:	84 e5       	ldi	r24, 0x54	; 84
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	f1 dd       	rcall	.-1054   	; 0x240 <Lcd_STR>
	mode = 0;			//mode 초기화
 65e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 662:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	int Error;
	Error = On_board_Password();
 666:	ae de       	rcall	.-676    	; 0x3c4 <On_board_Password>
	
	if(Error==1)										//비교 시 다를 경우
 668:	81 30       	cpi	r24, 0x01	; 1
 66a:	91 05       	cpc	r25, r1
	{
		Lcd_Pos(1, 0);
 66c:	a1 f4       	brne	.+40     	; 0x696 <Change_Password+0x5a>
 66e:	60 e0       	ldi	r22, 0x00	; 0
 670:	81 e0       	ldi	r24, 0x01	; 1
		Lcd_STR("Error number");
 672:	f2 dd       	rcall	.-1052   	; 0x258 <Lcd_Pos>
 674:	8b e1       	ldi	r24, 0x1B	; 27
 676:	91 e0       	ldi	r25, 0x01	; 1
		music(error);									//error 소리
 678:	e3 dd       	rcall	.-1082   	; 0x240 <Lcd_STR>
 67a:	83 e0       	ldi	r24, 0x03	; 3
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	66 de       	rcall	.-820    	; 0x34c <music>
 680:	2f ef       	ldi	r18, 0xFF	; 255
 682:	8f e7       	ldi	r24, 0x7F	; 127
 684:	96 e1       	ldi	r25, 0x16	; 22
 686:	21 50       	subi	r18, 0x01	; 1
 688:	80 40       	sbci	r24, 0x00	; 0
 68a:	90 40       	sbci	r25, 0x00	; 0
 68c:	e1 f7       	brne	.-8      	; 0x686 <Change_Password+0x4a>
 68e:	00 c0       	rjmp	.+0      	; 0x690 <Change_Password+0x54>
		_delay_ms(1000);								//1s delay
		Lcd_password_clear();							//LCD 초기화
 690:	00 00       	nop
 692:	23 de       	rcall	.-954    	; 0x2da <Lcd_password_clear>
 694:	c6 c0       	rjmp	.+396    	; 0x822 <Change_Password+0x1e6>
	}
	else if(Error == 2)									//비교 시 같은 경우
 696:	82 30       	cpi	r24, 0x02	; 2
 698:	91 05       	cpc	r25, r1
 69a:	09 f0       	breq	.+2      	; 0x69e <Change_Password+0x62>
 69c:	b6 c0       	rjmp	.+364    	; 0x80a <Change_Password+0x1ce>
	{
		unsigned char New_PassWord[5]="";
 69e:	1a 82       	std	Y+2, r1	; 0x02
 6a0:	19 82       	std	Y+1, r1	; 0x01
 6a2:	fe 01       	movw	r30, r28
 6a4:	33 96       	adiw	r30, 0x03	; 3
 6a6:	83 e0       	ldi	r24, 0x03	; 3
 6a8:	df 01       	movw	r26, r30
 6aa:	1d 92       	st	X+, r1
		int i=0;
		Lcd_Clear();
 6ac:	8a 95       	dec	r24
 6ae:	e9 f7       	brne	.-6      	; 0x6aa <Change_Password+0x6e>
		Lcd_Pos(0, 0);
 6b0:	e1 dd       	rcall	.-1086   	; 0x274 <Lcd_Clear>
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	d0 dd       	rcall	.-1120   	; 0x258 <Lcd_Pos>
		Lcd_STR("Change Password");						//LCD 첫번째 줄 출력
 6b8:	83 e6       	ldi	r24, 0x63	; 99
 6ba:	91 e0       	ldi	r25, 0x01	; 1
 6bc:	c1 dd       	rcall	.-1150   	; 0x240 <Lcd_STR>
 6be:	bf ef       	ldi	r27, 0xFF	; 255
 6c0:	2f e7       	ldi	r18, 0x7F	; 127
 6c2:	84 e0       	ldi	r24, 0x04	; 4
 6c4:	b1 50       	subi	r27, 0x01	; 1
 6c6:	20 40       	sbci	r18, 0x00	; 0
 6c8:	80 40       	sbci	r24, 0x00	; 0
 6ca:	e1 f7       	brne	.-8      	; 0x6c4 <Change_Password+0x88>
 6cc:	00 c0       	rjmp	.+0      	; 0x6ce <Change_Password+0x92>
 6ce:	00 00       	nop
		_delay_ms(200);
		for(i=0;i<6;) 
 6d0:	e1 2c       	mov	r14, r1
 6d2:	f1 2c       	mov	r15, r1
 6d4:	94 c0       	rjmp	.+296    	; 0x7fe <Change_Password+0x1c2>
		{
			char a=keyscan();							//키패드 입력
 6d6:	f5 dc       	rcall	.-1558   	; 0xc2 <keyscan>
 6d8:	18 2f       	mov	r17, r24
 6da:	88 23       	and	r24, r24
			if(a!='\0')									//keyscan()!='\0'으로 해놓았을 시 최초의 키 씹힘 현상 발생
 6dc:	09 f4       	brne	.+2      	; 0x6e0 <Change_Password+0xa4>
 6de:	8f c0       	rjmp	.+286    	; 0x7fe <Change_Password+0x1c2>
 6e0:	e1 e0       	ldi	r30, 0x01	; 1
			{
				New_PassWord[i] = a;
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	ec 0f       	add	r30, r28
 6e6:	fd 1f       	adc	r31, r29
 6e8:	ee 0d       	add	r30, r14
 6ea:	ff 1d       	adc	r31, r15
				if(New_PassWord[i] >= 0x30 && New_PassWord[i]<=0x39)
 6ec:	80 83       	st	Z, r24
 6ee:	80 ed       	ldi	r24, 0xD0	; 208
 6f0:	81 0f       	add	r24, r17
				{
					Lcd_Pos(1, i);
 6f2:	8a 30       	cpi	r24, 0x0A	; 10
 6f4:	58 f5       	brcc	.+86     	; 0x74c <Change_Password+0x110>
 6f6:	6e 2d       	mov	r22, r14
					Lcd_CHAR(New_PassWord[i]);
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	ae dd       	rcall	.-1188   	; 0x258 <Lcd_Pos>
					if(i>4)								//password 최대 4글자 제한
 6fc:	81 2f       	mov	r24, r17
 6fe:	98 dd       	rcall	.-1232   	; 0x230 <Lcd_CHAR>
 700:	95 e0       	ldi	r25, 0x05	; 5
					{									//화면 다시 변경모드로 초기화
						Lcd_Clear();
 702:	e9 16       	cp	r14, r25
 704:	f1 04       	cpc	r15, r1
						Lcd_Pos(0, 0);
 706:	0c f4       	brge	.+2      	; 0x70a <Change_Password+0xce>
 708:	6e c0       	rjmp	.+220    	; 0x7e6 <Change_Password+0x1aa>
 70a:	b4 dd       	rcall	.-1176   	; 0x274 <Lcd_Clear>
 70c:	60 e0       	ldi	r22, 0x00	; 0
						Lcd_STR("MAX word : 4 !!");
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	a3 dd       	rcall	.-1210   	; 0x258 <Lcd_Pos>
 712:	83 e7       	ldi	r24, 0x73	; 115
						Lcd_Pos(1, 0);
 714:	91 e0       	ldi	r25, 0x01	; 1
 716:	94 dd       	rcall	.-1240   	; 0x240 <Lcd_STR>
 718:	60 e0       	ldi	r22, 0x00	; 0
						Lcd_STR("Re-Enter");
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	9d dd       	rcall	.-1222   	; 0x258 <Lcd_Pos>
 71e:	83 e8       	ldi	r24, 0x83	; 131
 720:	91 e0       	ldi	r25, 0x01	; 1
 722:	8e dd       	rcall	.-1252   	; 0x240 <Lcd_STR>
 724:	af ef       	ldi	r26, 0xFF	; 255
 726:	bf e7       	ldi	r27, 0x7F	; 127
 728:	26 e1       	ldi	r18, 0x16	; 22
 72a:	a1 50       	subi	r26, 0x01	; 1
 72c:	b0 40       	sbci	r27, 0x00	; 0
 72e:	20 40       	sbci	r18, 0x00	; 0
 730:	e1 f7       	brne	.-8      	; 0x72a <Change_Password+0xee>
						_delay_ms(1000);
						Lcd_Clear();
 732:	00 c0       	rjmp	.+0      	; 0x734 <Change_Password+0xf8>
 734:	00 00       	nop
						Lcd_Pos(0, 0);
 736:	9e dd       	rcall	.-1220   	; 0x274 <Lcd_Clear>
 738:	60 e0       	ldi	r22, 0x00	; 0
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	8d dd       	rcall	.-1254   	; 0x258 <Lcd_Pos>
						Lcd_STR("Change Password");
 73e:	83 e6       	ldi	r24, 0x63	; 99
 740:	91 e0       	ldi	r25, 0x01	; 1
 742:	7e dd       	rcall	.-1284   	; 0x240 <Lcd_STR>
 744:	ee 24       	eor	r14, r14
						i=-1;
 746:	ea 94       	dec	r14
 748:	fe 2c       	mov	r15, r14
 74a:	4d c0       	rjmp	.+154    	; 0x7e6 <Change_Password+0x1aa>
 74c:	1a 32       	cpi	r17, 0x2A	; 42
					}
				}
				else if(New_PassWord[i] == '*')
 74e:	91 f5       	brne	.+100    	; 0x7b4 <Change_Password+0x178>
 750:	0d c0       	rjmp	.+26     	; 0x76c <Change_Password+0x130>
 752:	e1 e0       	ldi	r30, 0x01	; 1
				{	//입력완료
					for(int i=0;i<4;i++)
					{
						R_PassWord[i] = New_PassWord[i];
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	ec 0f       	add	r30, r28
 758:	fd 1f       	adc	r31, r29
 75a:	e8 0f       	add	r30, r24
 75c:	f9 1f       	adc	r31, r25
 75e:	20 81       	ld	r18, Z
 760:	fc 01       	movw	r30, r24
 762:	ee 5f       	subi	r30, 0xFE	; 254
 764:	fe 4f       	sbci	r31, 0xFE	; 254
 766:	20 83       	st	Z, r18
 768:	01 96       	adiw	r24, 0x01	; 1
						i=-1;
					}
				}
				else if(New_PassWord[i] == '*')
				{	//입력완료
					for(int i=0;i<4;i++)
 76a:	02 c0       	rjmp	.+4      	; 0x770 <Change_Password+0x134>
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	84 30       	cpi	r24, 0x04	; 4
 772:	91 05       	cpc	r25, r1
					{
						R_PassWord[i] = New_PassWord[i];
					}
					mode = 1;							//키패드 입력모드로 다시 초기화
 774:	74 f3       	brlt	.-36     	; 0x752 <Change_Password+0x116>
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 77e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 782:	8f ef       	ldi	r24, 0xFF	; 255
 784:	9f e7       	ldi	r25, 0x7F	; 127
 786:	a4 e0       	ldi	r26, 0x04	; 4
 788:	81 50       	subi	r24, 0x01	; 1
 78a:	90 40       	sbci	r25, 0x00	; 0
 78c:	a0 40       	sbci	r26, 0x00	; 0
 78e:	e1 f7       	brne	.-8      	; 0x788 <Change_Password+0x14c>
					Error=0;							//Error 초기화
					_delay_ms(200);
					Lcd_Pos(1, 0);
 790:	00 c0       	rjmp	.+0      	; 0x792 <Change_Password+0x156>
 792:	00 00       	nop
 794:	60 e0       	ldi	r22, 0x00	; 0
					Lcd_STR("Change Complete!");
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	5f dd       	rcall	.-1346   	; 0x258 <Lcd_Pos>
 79a:	8c e8       	ldi	r24, 0x8C	; 140
 79c:	91 e0       	ldi	r25, 0x01	; 1
 79e:	50 dd       	rcall	.-1376   	; 0x240 <Lcd_STR>
 7a0:	bf ef       	ldi	r27, 0xFF	; 255
 7a2:	2f e7       	ldi	r18, 0x7F	; 127
 7a4:	86 e1       	ldi	r24, 0x16	; 22
 7a6:	b1 50       	subi	r27, 0x01	; 1
 7a8:	20 40       	sbci	r18, 0x00	; 0
 7aa:	80 40       	sbci	r24, 0x00	; 0
 7ac:	e1 f7       	brne	.-8      	; 0x7a6 <Change_Password+0x16a>
 7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <Change_Password+0x174>
 7b0:	00 00       	nop
					_delay_ms(1000);
					return;
				}
				else if(New_PassWord[i]=='#')
 7b2:	3d c0       	rjmp	.+122    	; 0x82e <Change_Password+0x1f2>
 7b4:	13 32       	cpi	r17, 0x23	; 35
				{	//입력 취소
					Lcd_Clear();
 7b6:	b9 f4       	brne	.+46     	; 0x7e6 <Change_Password+0x1aa>
 7b8:	5d dd       	rcall	.-1350   	; 0x274 <Lcd_Clear>
					Lcd_Pos(0, 0);
 7ba:	60 e0       	ldi	r22, 0x00	; 0
 7bc:	80 e0       	ldi	r24, 0x00	; 0
 7be:	4c dd       	rcall	.-1384   	; 0x258 <Lcd_Pos>
 7c0:	8d e9       	ldi	r24, 0x9D	; 157
					Lcd_STR("Cancel Input");
 7c2:	91 e0       	ldi	r25, 0x01	; 1
 7c4:	3d dd       	rcall	.-1414   	; 0x240 <Lcd_STR>
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	90 e0       	ldi	r25, 0x00	; 0
					mode = 1;
 7ca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 7ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 7d2:	9f ef       	ldi	r25, 0xFF	; 255
 7d4:	af e7       	ldi	r26, 0x7F	; 127
 7d6:	b6 e1       	ldi	r27, 0x16	; 22
 7d8:	91 50       	subi	r25, 0x01	; 1
 7da:	a0 40       	sbci	r26, 0x00	; 0
 7dc:	b0 40       	sbci	r27, 0x00	; 0
 7de:	e1 f7       	brne	.-8      	; 0x7d8 <Change_Password+0x19c>
 7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <Change_Password+0x1a6>
 7e2:	00 00       	nop
 7e4:	24 c0       	rjmp	.+72     	; 0x82e <Change_Password+0x1f2>
 7e6:	2f ef       	ldi	r18, 0xFF	; 255
					Error=0;
					_delay_ms(1000);
					return;
				}
				i++;
 7e8:	e2 1a       	sub	r14, r18
 7ea:	f2 0a       	sbc	r15, r18
 7ec:	8f ef       	ldi	r24, 0xFF	; 255
 7ee:	9f e7       	ldi	r25, 0x7F	; 127
 7f0:	a4 e0       	ldi	r26, 0x04	; 4
 7f2:	81 50       	subi	r24, 0x01	; 1
 7f4:	90 40       	sbci	r25, 0x00	; 0
 7f6:	a0 40       	sbci	r26, 0x00	; 0
 7f8:	e1 f7       	brne	.-8      	; 0x7f2 <Change_Password+0x1b6>
 7fa:	00 c0       	rjmp	.+0      	; 0x7fc <Change_Password+0x1c0>
 7fc:	00 00       	nop
 7fe:	b6 e0       	ldi	r27, 0x06	; 6
		int i=0;
		Lcd_Clear();
		Lcd_Pos(0, 0);
		Lcd_STR("Change Password");						//LCD 첫번째 줄 출력
		_delay_ms(200);
		for(i=0;i<6;) 
 800:	eb 16       	cp	r14, r27
 802:	f1 04       	cpc	r15, r1
 804:	0c f4       	brge	.+2      	; 0x808 <Change_Password+0x1cc>
 806:	67 cf       	rjmp	.-306    	; 0x6d6 <Change_Password+0x9a>
 808:	0c c0       	rjmp	.+24     	; 0x822 <Change_Password+0x1e6>
 80a:	03 97       	sbiw	r24, 0x03	; 3
				i++;
				_delay_ms(200);
			}
		}//end of for(;i<6;)
	}//end of else if(Error == 2)
	else if(Error == 3) 
 80c:	51 f4       	brne	.+20     	; 0x822 <Change_Password+0x1e6>
 80e:	82 e0       	ldi	r24, 0x02	; 2
	{
		music(2);
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	9c dd       	rcall	.-1224   	; 0x34c <music>
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	90 e0       	ldi	r25, 0x00	; 0
		mode = 1;
 818:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 81c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 820:	06 c0       	rjmp	.+12     	; 0x82e <Change_Password+0x1f2>
 822:	81 e0       	ldi	r24, 0x01	; 1
		return;
 824:	90 e0       	ldi	r25, 0x00	; 0
	}
	mode = 1;
 826:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 82a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 82e:	0f 90       	pop	r0
 830:	0f 90       	pop	r0
	return;
}
 832:	0f 90       	pop	r0
 834:	0f 90       	pop	r0
 836:	0f 90       	pop	r0
 838:	df 91       	pop	r29
 83a:	cf 91       	pop	r28
 83c:	1f 91       	pop	r17
 83e:	ff 90       	pop	r15
 840:	ef 90       	pop	r14
 842:	08 95       	ret

00000844 <main>:
 844:	39 dc       	rcall	.-1934   	; 0xb8 <init_keypad>
 846:	88 e0       	ldi	r24, 0x08	; 8
{
    // A : KeyPad
	init_keypad();
	
	// 부저(PE3)
	DDRE = 0x08;
 848:	82 b9       	out	0x02, r24	; 2
	TCCR3A = 0x00;
 84a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = 0x19;
 84e:	89 e1       	ldi	r24, 0x19	; 25
 850:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	TCCR3C = 0x00;
 854:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
	TCNT3 = 0x0000;
 858:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 85c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	// PE4 : 인터럽트4
	//DDRE = 0x00; 이미 부저에서 선언이 되어있음.
	EIMSK = (1<<INT4) | (1<<INT5);
 860:	80 e3       	ldi	r24, 0x30	; 48
 862:	89 bf       	out	0x39, r24	; 57
	EICRB = (1<<ISC41) | (1<<ISC40) | (1<<ISC51) | (1<<ISC50);
 864:	8f e0       	ldi	r24, 0x0F	; 15
	
	// UART
	init_USART0();
 866:	8a bf       	out	0x3a, r24	; 58
 868:	42 d0       	rcall	.+132    	; 0x8ee <init_USART0>
	
	// D : Motor
	DDRD = 0xff;
 86a:	8f ef       	ldi	r24, 0xFF	; 255
 86c:	81 bb       	out	0x11, r24	; 17
	
	// C, F : LCD
	DDRC = 0XFF;
 86e:	84 bb       	out	0x14, r24	; 20
	DDRG = 0xFF;
 870:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	Lcd_Init();
 874:	08 dd       	rcall	.-1520   	; 0x286 <Lcd_Init>
	unsigned char R_PassWord[]="0000";
	sei();
 876:	78 94       	sei
	
    while (1) 
    {
		if(mode==1) On_board();							//보드 키패드 입력 모드
 878:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 87c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 880:	81 30       	cpi	r24, 0x01	; 1
 882:	91 05       	cpc	r25, r1
 884:	11 f4       	brne	.+4      	; 0x88a <main+0x46>
 886:	20 de       	rcall	.-960    	; 0x4c8 <On_board>
 888:	f7 cf       	rjmp	.-18     	; 0x878 <main+0x34>
		else if (mode == -1) ON_terminal();				//터미널 입력 모드
 88a:	8f 3f       	cpi	r24, 0xFF	; 255
 88c:	2f ef       	ldi	r18, 0xFF	; 255
 88e:	92 07       	cpc	r25, r18
 890:	11 f4       	brne	.+4      	; 0x896 <main+0x52>
 892:	54 de       	rcall	.-856    	; 0x53c <ON_terminal>
		else if (mode == 5)	Change_Password();			//비밀번호 변경 모드
 894:	f1 cf       	rjmp	.-30     	; 0x878 <main+0x34>
 896:	05 97       	sbiw	r24, 0x05	; 5
 898:	79 f7       	brne	.-34     	; 0x878 <main+0x34>
 89a:	d0 de       	rcall	.-608    	; 0x63c <Change_Password>
 89c:	ed cf       	rjmp	.-38     	; 0x878 <main+0x34>

0000089e <Motor>:
#include <util/delay.h>
#include "Lcd.h"

void Motor()
{
	for(int i=0;i<20;i++)
 89e:	80 e0       	ldi	r24, 0x00	; 0
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	21 c0       	rjmp	.+66     	; 0x8e6 <Motor+0x48>
	{	//20스텝만 돌리기 (문열리는 동작)
		PORTD = 0x30;
 8a4:	20 e3       	ldi	r18, 0x30	; 48
 8a6:	22 bb       	out	0x12, r18	; 18
 8a8:	ef ef       	ldi	r30, 0xFF	; 255
 8aa:	ff e8       	ldi	r31, 0x8F	; 143
 8ac:	31 97       	sbiw	r30, 0x01	; 1
 8ae:	f1 f7       	brne	.-4      	; 0x8ac <Motor+0xe>
 8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <Motor+0x14>
 8b2:	00 00       	nop
		_delay_ms(20);
		PORTD = 0x90;
 8b4:	20 e9       	ldi	r18, 0x90	; 144
 8b6:	22 bb       	out	0x12, r18	; 18
 8b8:	ef ef       	ldi	r30, 0xFF	; 255
 8ba:	ff e8       	ldi	r31, 0x8F	; 143
 8bc:	31 97       	sbiw	r30, 0x01	; 1
 8be:	f1 f7       	brne	.-4      	; 0x8bc <Motor+0x1e>
 8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <Motor+0x24>
 8c2:	00 00       	nop
		_delay_ms(20);
		PORTD = 0xc0;
 8c4:	20 ec       	ldi	r18, 0xC0	; 192
 8c6:	22 bb       	out	0x12, r18	; 18
 8c8:	ef ef       	ldi	r30, 0xFF	; 255
 8ca:	ff e8       	ldi	r31, 0x8F	; 143
 8cc:	31 97       	sbiw	r30, 0x01	; 1
 8ce:	f1 f7       	brne	.-4      	; 0x8cc <Motor+0x2e>
 8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <Motor+0x34>
 8d2:	00 00       	nop
		_delay_ms(20);
		PORTD = 0x60;
 8d4:	20 e6       	ldi	r18, 0x60	; 96
 8d6:	22 bb       	out	0x12, r18	; 18
 8d8:	ef ef       	ldi	r30, 0xFF	; 255
 8da:	ff e8       	ldi	r31, 0x8F	; 143
 8dc:	31 97       	sbiw	r30, 0x01	; 1
 8de:	f1 f7       	brne	.-4      	; 0x8dc <Motor+0x3e>
 8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <Motor+0x44>
 8e2:	00 00       	nop
#include <util/delay.h>
#include "Lcd.h"

void Motor()
{
	for(int i=0;i<20;i++)
 8e4:	01 96       	adiw	r24, 0x01	; 1
 8e6:	84 31       	cpi	r24, 0x14	; 20
 8e8:	91 05       	cpc	r25, r1
 8ea:	e4 f2       	brlt	.-72     	; 0x8a4 <Motor+0x6>
		PORTD = 0xc0;
		_delay_ms(20);
		PORTD = 0x60;
		_delay_ms(20);
	}
 8ec:	08 95       	ret

000008ee <init_USART0>:
#include <util/delay.h>
#include "Lcd.h"

void init_USART0(void)
{
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 8ee:	88 e1       	ldi	r24, 0x18	; 24
 8f0:	8a b9       	out	0x0a, r24	; 10
	UCSR0A = 0x00;
 8f2:	1b b8       	out	0x0b, r1	; 11
	//UCSR0C = (1<<UPM01)|(1<<UCSZ01)|(1<<UCSZ00);
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 8f4:	86 e0       	ldi	r24, 0x06	; 6
 8f6:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H = 0x00;
 8fa:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 3;
 8fe:	83 e0       	ldi	r24, 0x03	; 3
 900:	89 b9       	out	0x09, r24	; 9
 902:	08 95       	ret

00000904 <putch_USART0>:
	}
}

void putch_USART0(char data)
{
	while(!(UCSR0A & (1<<UDRE0)));
 904:	5d 9b       	sbis	0x0b, 5	; 11
 906:	fe cf       	rjmp	.-4      	; 0x904 <putch_USART0>
	UDR0 = data;
 908:	8c b9       	out	0x0c, r24	; 12
 90a:	08 95       	ret

0000090c <puts_USART0>:
	UBRR0H = 0x00;
	UBRR0L = 3;
}

void puts_USART0(char *str)
{
 90c:	cf 93       	push	r28
 90e:	df 93       	push	r29
 910:	ec 01       	movw	r28, r24
	while(*str != 0){
 912:	02 c0       	rjmp	.+4      	; 0x918 <puts_USART0+0xc>
		putch_USART0(*str);
 914:	f7 df       	rcall	.-18     	; 0x904 <putch_USART0>
		str++;
 916:	21 96       	adiw	r28, 0x01	; 1
	UBRR0L = 3;
}

void puts_USART0(char *str)
{
	while(*str != 0){
 918:	88 81       	ld	r24, Y
 91a:	81 11       	cpse	r24, r1
 91c:	fb cf       	rjmp	.-10     	; 0x914 <puts_USART0+0x8>
		putch_USART0(*str);
		str++;
	}
}
 91e:	df 91       	pop	r29
 920:	cf 91       	pop	r28
 922:	08 95       	ret

00000924 <__divmodsi4>:
 924:	05 2e       	mov	r0, r21
 926:	97 fb       	bst	r25, 7
 928:	16 f4       	brtc	.+4      	; 0x92e <__divmodsi4+0xa>
 92a:	00 94       	com	r0
 92c:	0f d0       	rcall	.+30     	; 0x94c <__negsi2>
 92e:	57 fd       	sbrc	r21, 7
 930:	05 d0       	rcall	.+10     	; 0x93c <__divmodsi4_neg2>
 932:	14 d0       	rcall	.+40     	; 0x95c <__udivmodsi4>
 934:	07 fc       	sbrc	r0, 7
 936:	02 d0       	rcall	.+4      	; 0x93c <__divmodsi4_neg2>
 938:	46 f4       	brtc	.+16     	; 0x94a <__divmodsi4_exit>
 93a:	08 c0       	rjmp	.+16     	; 0x94c <__negsi2>

0000093c <__divmodsi4_neg2>:
 93c:	50 95       	com	r21
 93e:	40 95       	com	r20
 940:	30 95       	com	r19
 942:	21 95       	neg	r18
 944:	3f 4f       	sbci	r19, 0xFF	; 255
 946:	4f 4f       	sbci	r20, 0xFF	; 255
 948:	5f 4f       	sbci	r21, 0xFF	; 255

0000094a <__divmodsi4_exit>:
 94a:	08 95       	ret

0000094c <__negsi2>:
 94c:	90 95       	com	r25
 94e:	80 95       	com	r24
 950:	70 95       	com	r23
 952:	61 95       	neg	r22
 954:	7f 4f       	sbci	r23, 0xFF	; 255
 956:	8f 4f       	sbci	r24, 0xFF	; 255
 958:	9f 4f       	sbci	r25, 0xFF	; 255
 95a:	08 95       	ret

0000095c <__udivmodsi4>:
 95c:	a1 e2       	ldi	r26, 0x21	; 33
 95e:	1a 2e       	mov	r1, r26
 960:	aa 1b       	sub	r26, r26
 962:	bb 1b       	sub	r27, r27
 964:	fd 01       	movw	r30, r26
 966:	0d c0       	rjmp	.+26     	; 0x982 <__udivmodsi4_ep>

00000968 <__udivmodsi4_loop>:
 968:	aa 1f       	adc	r26, r26
 96a:	bb 1f       	adc	r27, r27
 96c:	ee 1f       	adc	r30, r30
 96e:	ff 1f       	adc	r31, r31
 970:	a2 17       	cp	r26, r18
 972:	b3 07       	cpc	r27, r19
 974:	e4 07       	cpc	r30, r20
 976:	f5 07       	cpc	r31, r21
 978:	20 f0       	brcs	.+8      	; 0x982 <__udivmodsi4_ep>
 97a:	a2 1b       	sub	r26, r18
 97c:	b3 0b       	sbc	r27, r19
 97e:	e4 0b       	sbc	r30, r20
 980:	f5 0b       	sbc	r31, r21

00000982 <__udivmodsi4_ep>:
 982:	66 1f       	adc	r22, r22
 984:	77 1f       	adc	r23, r23
 986:	88 1f       	adc	r24, r24
 988:	99 1f       	adc	r25, r25
 98a:	1a 94       	dec	r1
 98c:	69 f7       	brne	.-38     	; 0x968 <__udivmodsi4_loop>
 98e:	60 95       	com	r22
 990:	70 95       	com	r23
 992:	80 95       	com	r24
 994:	90 95       	com	r25
 996:	9b 01       	movw	r18, r22
 998:	ac 01       	movw	r20, r24
 99a:	bd 01       	movw	r22, r26
 99c:	cf 01       	movw	r24, r30
 99e:	08 95       	ret

000009a0 <_exit>:
 9a0:	f8 94       	cli

000009a2 <__stop_program>:
 9a2:	ff cf       	rjmp	.-2      	; 0x9a2 <__stop_program>
