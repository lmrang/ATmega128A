
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001f6  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  0000028c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000088d  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079c  00000000  00000000  00000bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000324  00000000  00000000  00001365  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  0000168c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d0  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000117  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001c23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	59 c0       	rjmp	.+178    	; 0xc8 <__vector_5>
  16:	00 00       	nop
  18:	6c c0       	rjmp	.+216    	; 0xf2 <__vector_6>
  1a:	00 00       	nop
  1c:	90 c0       	rjmp	.+288    	; 0x13e <__vector_7>
  1e:	00 00       	nop
  20:	b8 c0       	rjmp	.+368    	; 0x192 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ef       	ldi	r30, 0xF6	; 246
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	80 d0       	rcall	.+256    	; 0x1c4 <main>
  c4:	96 c0       	rjmp	.+300    	; 0x1f2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_5>:

volatile int Light = 0;
volatile unsigned char Light_flag = 1;

SIGNAL(INT4_vect)
{	//불끄기
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	cli();
  d4:	f8 94       	cli
	Light = 0;
  d6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
  da:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	Light_flag = 1;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei();
  e4:	78 94       	sei
}
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <__vector_6>:

SIGNAL(INT5_vect)
{	//불 점차 어둡게
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
	cli();
 100:	f8 94       	cli
	Light -= 51;
 102:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 106:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 10a:	c3 97       	sbiw	r24, 0x33	; 51
 10c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 110:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	if(Light < 0) Light=0;
 114:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 118:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 11c:	99 23       	and	r25, r25
 11e:	24 f4       	brge	.+8      	; 0x128 <__vector_6+0x36>
 120:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 124:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	Light_flag =1;
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei();
 12e:	78 94       	sei
}
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <__vector_7>:

SIGNAL(INT6_vect)
{	//불 점차 밝게
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
	cli();
 14c:	f8 94       	cli
	Light += 51;
 14e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 152:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 156:	c3 96       	adiw	r24, 0x33	; 51
 158:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 15c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	if(Light > 255) Light=255;
 160:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 164:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 168:	8f 3f       	cpi	r24, 0xFF	; 255
 16a:	91 05       	cpc	r25, r1
 16c:	39 f0       	breq	.+14     	; 0x17c <__vector_7+0x3e>
 16e:	34 f0       	brlt	.+12     	; 0x17c <__vector_7+0x3e>
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 178:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	Light_flag =1;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei();
 182:	78 94       	sei
}
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <__vector_8>:

SIGNAL(INT7_vect)
{	//불 밝기 100%
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
	cli();
 1a0:	f8 94       	cli
	Light = 255;
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 1aa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	Light_flag =1;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	sei();
 1b4:	78 94       	sei
}
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <main>:

int main() 
{
	DDRB = 0xff;
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	87 bb       	out	0x17, r24	; 23
	DDRE = 0X00;
 1c8:	12 b8       	out	0x02, r1	; 2
	
	TCCR2 = (1<<WGM20) | (1<<COM21) | (0<<CS22) | (1<<CS21) | (0<<CS20);
 1ca:	92 e6       	ldi	r25, 0x62	; 98
 1cc:	95 bd       	out	0x25, r25	; 37
	TCNT2 = 0;
 1ce:	14 bc       	out	0x24, r1	; 36
	
	EICRB = 0XFF;
 1d0:	8a bf       	out	0x3a, r24	; 58
	EIMSK = 0XF0;
 1d2:	80 ef       	ldi	r24, 0xF0	; 240
 1d4:	89 bf       	out	0x39, r24	; 57
	EIFR = 0XF0;
 1d6:	88 bf       	out	0x38, r24	; 56
	
	sei();
 1d8:	78 94       	sei
	
	while(1)
	{
		if(Light_flag)
 1da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1de:	88 23       	and	r24, r24
 1e0:	e1 f3       	breq	.-8      	; 0x1da <main+0x16>
		{
			OCR2 = Light;
 1e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1e6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1ea:	83 bd       	out	0x23, r24	; 35
			Light_flag = 0;
 1ec:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f0:	f4 cf       	rjmp	.-24     	; 0x1da <main+0x16>

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
